//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Script/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""efcad2d2-cd16-42ef-91be-2a7745942108"",
            ""actions"": [
                {
                    ""name"": ""Movment"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f5673264-0cb6-4879-b1ab-6d51b70dbe74"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5fc4bc74-c92a-4969-b5bf-28c57d88915b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""cb0fe403-2240-4f01-95dc-cd5dea0881db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""ad72ecb4-2279-43bc-b5fc-16d65926ec03"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""275ae2f1-45aa-41b9-9d2e-a0ca6dce4869"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5375dc41-6409-401a-b0c9-a00cb3efcb2b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d1d53d38-9f53-448e-a23b-86f44e20cfdf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e3addf60-6350-484e-9522-bee21bc93a2f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3a5ee939-b1f0-4d7c-92f3-b4899de2ca7d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""267840ac-b697-4d73-a160-ea3ab08338ec"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df335b03-78d8-4456-967a-d947b527817c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73b55fa5-ad2c-4a23-987a-a55e125f5082"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerAction"",
            ""id"": ""b733264b-5958-4688-b234-90f4ca2ac549"",
            ""actions"": [
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""9958f57c-18b2-4a5b-a053-55ed5c963d5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RB"",
                    ""type"": ""Button"",
                    ""id"": ""c69d1c9a-0645-4ebc-81c8-f95b4c1cabf3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RT"",
                    ""type"": ""Button"",
                    ""id"": ""9fbe6843-b7a7-41f4-aeb9-4c7d2885d719"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interactables"",
                    ""type"": ""Button"",
                    ""id"": ""8cf885dd-a968-464a-9208-4b2de5bcfb6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOn"",
                    ""type"": ""Button"",
                    ""id"": ""e6ea1bf8-ad13-4755-96f1-4022fe88974b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOnTargetRight"",
                    ""type"": ""Button"",
                    ""id"": ""8176e92a-7da2-4523-b12e-77615f22c104"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOnTargetLeft"",
                    ""type"": ""Button"",
                    ""id"": ""f7dbbf9c-13e0-4b6a-ae63-88ce6ff54a1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""44238ad0-0110-4a65-b048-63a332bcd60b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""c4211437-bb28-4aa2-b50d-e1a20650f747"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""5ec8ee3d-a146-4b61-a03d-2f30029a86e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""b864b8d6-7e44-4774-b639-f08a78ebefae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackStab"",
                    ""type"": ""Button"",
                    ""id"": ""8fdfea5b-a117-42f2-beb3-de289b4c61e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Parry"",
                    ""type"": ""Button"",
                    ""id"": ""1e6d8174-5218-4ae1-8d43-b411d992bc90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shield"",
                    ""type"": ""Button"",
                    ""id"": ""a0828627-cd65-4070-acc9-859ffa3d4d29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HealRecovery"",
                    ""type"": ""Button"",
                    ""id"": ""505f488b-9523-42ad-86b4-d5ddf45aafaa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ManaREcovery"",
                    ""type"": ""Button"",
                    ""id"": ""05765ce8-cc87-4e13-b29f-a64dbcf5bd8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Consumable"",
                    ""type"": ""Button"",
                    ""id"": ""15476f67-2f3d-4240-9f8b-26e366914078"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""81500aaa-b55a-4c78-9e9c-86043bebf308"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef027952-58a7-4431-9124-4fa168235f0d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39e864fc-c6d5-42dc-a0fa-b50874c16972"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5e40f9d-0a19-4d00-a87a-226121a0dba3"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactables"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e485fcb2-1029-4416-abe4-cf274e1bd5fc"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46962622-aae2-42ef-b907-142c64180c76"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockOnTargetRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c7bff78-1412-48d3-9a1e-cdcb19293753"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LockOnTargetLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f655dc2c-8ab7-473e-9cd9-58176a27dd0b"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3deddb9b-0494-4d67-a10b-83ab5771bde0"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2941805-c26f-48c8-ae22-b50c6202a21e"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40685046-7bd8-4eb2-b1cb-0a562e1d6a34"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""683d73d6-b992-4744-b445-c202a550e52e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82da0064-6308-4d17-934a-7c842f3685e4"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32bfe025-d40d-4a99-971d-de061756d713"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e355082d-9a8c-490d-ad91-a489fcdbc602"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e694acb-a457-406f-b2f2-f3ba369b9f95"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackStab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""835ac83f-bbc5-4f21-bba0-36ffb3de5c85"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Parry"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd6970bb-c878-43d4-9466-b3eab79aa095"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shield"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a49c527-d97c-40de-bb28-5d6b2d1d09b2"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HealRecovery"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72800371-cd39-4303-a88f-42e228386a39"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ManaREcovery"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""066472ec-5e21-474b-a4a1-3cde04f4ae43"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Consumable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerQuickSlots"",
            ""id"": ""e8c2f562-1d2b-42ab-9a12-d46699d4ab77"",
            ""actions"": [
                {
                    ""name"": ""D_Pad_up"",
                    ""type"": ""Button"",
                    ""id"": ""5fae14b3-1071-4db5-a112-2f3fbe372ea1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D_Pad_Down"",
                    ""type"": ""Button"",
                    ""id"": ""e2e2828e-956f-46e8-8f4f-8e2eb384ec1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D_Pad_Right"",
                    ""type"": ""Button"",
                    ""id"": ""7ab4dde0-2deb-4fbc-8ac8-759b6bcb692a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D_Pad_Left"",
                    ""type"": ""Button"",
                    ""id"": ""006c7fbe-6d92-473b-a309-1f838537a1cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a6f68e61-ebdf-41ed-ac9b-4549a31daaee"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D_Pad_up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce220c34-3087-4040-8875-dd2dc5e7d6a9"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D_Pad_up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfd1b2bd-2737-4c22-bf44-00c6e718c8ea"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D_Pad_Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73286178-3b1a-460d-83d6-48db1b85a6ba"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D_Pad_Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b66704e-6517-43c2-a389-a2fea14de161"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D_Pad_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""923739bf-a5b7-4fcf-ad7a-4550377f0f0a"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D_Pad_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6cbd0c4-dabe-4d79-b205-a82f8726598d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D_Pad_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6577d1f-4ca3-4cb3-b8c1-0fc447270402"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D_Pad_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Movment = m_PlayerMovement.FindAction("Movment", throwIfNotFound: true);
        m_PlayerMovement_Camera = m_PlayerMovement.FindAction("Camera", throwIfNotFound: true);
        m_PlayerMovement_Jump = m_PlayerMovement.FindAction("Jump", throwIfNotFound: true);
        // PlayerAction
        m_PlayerAction = asset.FindActionMap("PlayerAction", throwIfNotFound: true);
        m_PlayerAction_Roll = m_PlayerAction.FindAction("Roll", throwIfNotFound: true);
        m_PlayerAction_RB = m_PlayerAction.FindAction("RB", throwIfNotFound: true);
        m_PlayerAction_RT = m_PlayerAction.FindAction("RT", throwIfNotFound: true);
        m_PlayerAction_Interactables = m_PlayerAction.FindAction("Interactables", throwIfNotFound: true);
        m_PlayerAction_LockOn = m_PlayerAction.FindAction("LockOn", throwIfNotFound: true);
        m_PlayerAction_LockOnTargetRight = m_PlayerAction.FindAction("LockOnTargetRight", throwIfNotFound: true);
        m_PlayerAction_LockOnTargetLeft = m_PlayerAction.FindAction("LockOnTargetLeft", throwIfNotFound: true);
        m_PlayerAction_Y = m_PlayerAction.FindAction("Y", throwIfNotFound: true);
        m_PlayerAction_A = m_PlayerAction.FindAction("A", throwIfNotFound: true);
        m_PlayerAction_B = m_PlayerAction.FindAction("B", throwIfNotFound: true);
        m_PlayerAction_X = m_PlayerAction.FindAction("X", throwIfNotFound: true);
        m_PlayerAction_BackStab = m_PlayerAction.FindAction("BackStab", throwIfNotFound: true);
        m_PlayerAction_Parry = m_PlayerAction.FindAction("Parry", throwIfNotFound: true);
        m_PlayerAction_Shield = m_PlayerAction.FindAction("Shield", throwIfNotFound: true);
        m_PlayerAction_HealRecovery = m_PlayerAction.FindAction("HealRecovery", throwIfNotFound: true);
        m_PlayerAction_ManaREcovery = m_PlayerAction.FindAction("ManaREcovery", throwIfNotFound: true);
        m_PlayerAction_Consumable = m_PlayerAction.FindAction("Consumable", throwIfNotFound: true);
        // PlayerQuickSlots
        m_PlayerQuickSlots = asset.FindActionMap("PlayerQuickSlots", throwIfNotFound: true);
        m_PlayerQuickSlots_D_Pad_up = m_PlayerQuickSlots.FindAction("D_Pad_up", throwIfNotFound: true);
        m_PlayerQuickSlots_D_Pad_Down = m_PlayerQuickSlots.FindAction("D_Pad_Down", throwIfNotFound: true);
        m_PlayerQuickSlots_D_Pad_Right = m_PlayerQuickSlots.FindAction("D_Pad_Right", throwIfNotFound: true);
        m_PlayerQuickSlots_D_Pad_Left = m_PlayerQuickSlots.FindAction("D_Pad_Left", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_Movment;
    private readonly InputAction m_PlayerMovement_Camera;
    private readonly InputAction m_PlayerMovement_Jump;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movment => m_Wrapper.m_PlayerMovement_Movment;
        public InputAction @Camera => m_Wrapper.m_PlayerMovement_Camera;
        public InputAction @Jump => m_Wrapper.m_PlayerMovement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @Movment.started += instance.OnMovment;
            @Movment.performed += instance.OnMovment;
            @Movment.canceled += instance.OnMovment;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @Movment.started -= instance.OnMovment;
            @Movment.performed -= instance.OnMovment;
            @Movment.canceled -= instance.OnMovment;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerAction
    private readonly InputActionMap m_PlayerAction;
    private List<IPlayerActionActions> m_PlayerActionActionsCallbackInterfaces = new List<IPlayerActionActions>();
    private readonly InputAction m_PlayerAction_Roll;
    private readonly InputAction m_PlayerAction_RB;
    private readonly InputAction m_PlayerAction_RT;
    private readonly InputAction m_PlayerAction_Interactables;
    private readonly InputAction m_PlayerAction_LockOn;
    private readonly InputAction m_PlayerAction_LockOnTargetRight;
    private readonly InputAction m_PlayerAction_LockOnTargetLeft;
    private readonly InputAction m_PlayerAction_Y;
    private readonly InputAction m_PlayerAction_A;
    private readonly InputAction m_PlayerAction_B;
    private readonly InputAction m_PlayerAction_X;
    private readonly InputAction m_PlayerAction_BackStab;
    private readonly InputAction m_PlayerAction_Parry;
    private readonly InputAction m_PlayerAction_Shield;
    private readonly InputAction m_PlayerAction_HealRecovery;
    private readonly InputAction m_PlayerAction_ManaREcovery;
    private readonly InputAction m_PlayerAction_Consumable;
    public struct PlayerActionActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActionActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Roll => m_Wrapper.m_PlayerAction_Roll;
        public InputAction @RB => m_Wrapper.m_PlayerAction_RB;
        public InputAction @RT => m_Wrapper.m_PlayerAction_RT;
        public InputAction @Interactables => m_Wrapper.m_PlayerAction_Interactables;
        public InputAction @LockOn => m_Wrapper.m_PlayerAction_LockOn;
        public InputAction @LockOnTargetRight => m_Wrapper.m_PlayerAction_LockOnTargetRight;
        public InputAction @LockOnTargetLeft => m_Wrapper.m_PlayerAction_LockOnTargetLeft;
        public InputAction @Y => m_Wrapper.m_PlayerAction_Y;
        public InputAction @A => m_Wrapper.m_PlayerAction_A;
        public InputAction @B => m_Wrapper.m_PlayerAction_B;
        public InputAction @X => m_Wrapper.m_PlayerAction_X;
        public InputAction @BackStab => m_Wrapper.m_PlayerAction_BackStab;
        public InputAction @Parry => m_Wrapper.m_PlayerAction_Parry;
        public InputAction @Shield => m_Wrapper.m_PlayerAction_Shield;
        public InputAction @HealRecovery => m_Wrapper.m_PlayerAction_HealRecovery;
        public InputAction @ManaREcovery => m_Wrapper.m_PlayerAction_ManaREcovery;
        public InputAction @Consumable => m_Wrapper.m_PlayerAction_Consumable;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActionActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Add(instance);
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
            @RB.started += instance.OnRB;
            @RB.performed += instance.OnRB;
            @RB.canceled += instance.OnRB;
            @RT.started += instance.OnRT;
            @RT.performed += instance.OnRT;
            @RT.canceled += instance.OnRT;
            @Interactables.started += instance.OnInteractables;
            @Interactables.performed += instance.OnInteractables;
            @Interactables.canceled += instance.OnInteractables;
            @LockOn.started += instance.OnLockOn;
            @LockOn.performed += instance.OnLockOn;
            @LockOn.canceled += instance.OnLockOn;
            @LockOnTargetRight.started += instance.OnLockOnTargetRight;
            @LockOnTargetRight.performed += instance.OnLockOnTargetRight;
            @LockOnTargetRight.canceled += instance.OnLockOnTargetRight;
            @LockOnTargetLeft.started += instance.OnLockOnTargetLeft;
            @LockOnTargetLeft.performed += instance.OnLockOnTargetLeft;
            @LockOnTargetLeft.canceled += instance.OnLockOnTargetLeft;
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @BackStab.started += instance.OnBackStab;
            @BackStab.performed += instance.OnBackStab;
            @BackStab.canceled += instance.OnBackStab;
            @Parry.started += instance.OnParry;
            @Parry.performed += instance.OnParry;
            @Parry.canceled += instance.OnParry;
            @Shield.started += instance.OnShield;
            @Shield.performed += instance.OnShield;
            @Shield.canceled += instance.OnShield;
            @HealRecovery.started += instance.OnHealRecovery;
            @HealRecovery.performed += instance.OnHealRecovery;
            @HealRecovery.canceled += instance.OnHealRecovery;
            @ManaREcovery.started += instance.OnManaREcovery;
            @ManaREcovery.performed += instance.OnManaREcovery;
            @ManaREcovery.canceled += instance.OnManaREcovery;
            @Consumable.started += instance.OnConsumable;
            @Consumable.performed += instance.OnConsumable;
            @Consumable.canceled += instance.OnConsumable;
        }

        private void UnregisterCallbacks(IPlayerActionActions instance)
        {
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
            @RB.started -= instance.OnRB;
            @RB.performed -= instance.OnRB;
            @RB.canceled -= instance.OnRB;
            @RT.started -= instance.OnRT;
            @RT.performed -= instance.OnRT;
            @RT.canceled -= instance.OnRT;
            @Interactables.started -= instance.OnInteractables;
            @Interactables.performed -= instance.OnInteractables;
            @Interactables.canceled -= instance.OnInteractables;
            @LockOn.started -= instance.OnLockOn;
            @LockOn.performed -= instance.OnLockOn;
            @LockOn.canceled -= instance.OnLockOn;
            @LockOnTargetRight.started -= instance.OnLockOnTargetRight;
            @LockOnTargetRight.performed -= instance.OnLockOnTargetRight;
            @LockOnTargetRight.canceled -= instance.OnLockOnTargetRight;
            @LockOnTargetLeft.started -= instance.OnLockOnTargetLeft;
            @LockOnTargetLeft.performed -= instance.OnLockOnTargetLeft;
            @LockOnTargetLeft.canceled -= instance.OnLockOnTargetLeft;
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @BackStab.started -= instance.OnBackStab;
            @BackStab.performed -= instance.OnBackStab;
            @BackStab.canceled -= instance.OnBackStab;
            @Parry.started -= instance.OnParry;
            @Parry.performed -= instance.OnParry;
            @Parry.canceled -= instance.OnParry;
            @Shield.started -= instance.OnShield;
            @Shield.performed -= instance.OnShield;
            @Shield.canceled -= instance.OnShield;
            @HealRecovery.started -= instance.OnHealRecovery;
            @HealRecovery.performed -= instance.OnHealRecovery;
            @HealRecovery.canceled -= instance.OnHealRecovery;
            @ManaREcovery.started -= instance.OnManaREcovery;
            @ManaREcovery.performed -= instance.OnManaREcovery;
            @ManaREcovery.canceled -= instance.OnManaREcovery;
            @Consumable.started -= instance.OnConsumable;
            @Consumable.performed -= instance.OnConsumable;
            @Consumable.canceled -= instance.OnConsumable;
        }

        public void RemoveCallbacks(IPlayerActionActions instance)
        {
            if (m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActionActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActionActions @PlayerAction => new PlayerActionActions(this);

    // PlayerQuickSlots
    private readonly InputActionMap m_PlayerQuickSlots;
    private List<IPlayerQuickSlotsActions> m_PlayerQuickSlotsActionsCallbackInterfaces = new List<IPlayerQuickSlotsActions>();
    private readonly InputAction m_PlayerQuickSlots_D_Pad_up;
    private readonly InputAction m_PlayerQuickSlots_D_Pad_Down;
    private readonly InputAction m_PlayerQuickSlots_D_Pad_Right;
    private readonly InputAction m_PlayerQuickSlots_D_Pad_Left;
    public struct PlayerQuickSlotsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerQuickSlotsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @D_Pad_up => m_Wrapper.m_PlayerQuickSlots_D_Pad_up;
        public InputAction @D_Pad_Down => m_Wrapper.m_PlayerQuickSlots_D_Pad_Down;
        public InputAction @D_Pad_Right => m_Wrapper.m_PlayerQuickSlots_D_Pad_Right;
        public InputAction @D_Pad_Left => m_Wrapper.m_PlayerQuickSlots_D_Pad_Left;
        public InputActionMap Get() { return m_Wrapper.m_PlayerQuickSlots; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerQuickSlotsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerQuickSlotsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterfaces.Add(instance);
            @D_Pad_up.started += instance.OnD_Pad_up;
            @D_Pad_up.performed += instance.OnD_Pad_up;
            @D_Pad_up.canceled += instance.OnD_Pad_up;
            @D_Pad_Down.started += instance.OnD_Pad_Down;
            @D_Pad_Down.performed += instance.OnD_Pad_Down;
            @D_Pad_Down.canceled += instance.OnD_Pad_Down;
            @D_Pad_Right.started += instance.OnD_Pad_Right;
            @D_Pad_Right.performed += instance.OnD_Pad_Right;
            @D_Pad_Right.canceled += instance.OnD_Pad_Right;
            @D_Pad_Left.started += instance.OnD_Pad_Left;
            @D_Pad_Left.performed += instance.OnD_Pad_Left;
            @D_Pad_Left.canceled += instance.OnD_Pad_Left;
        }

        private void UnregisterCallbacks(IPlayerQuickSlotsActions instance)
        {
            @D_Pad_up.started -= instance.OnD_Pad_up;
            @D_Pad_up.performed -= instance.OnD_Pad_up;
            @D_Pad_up.canceled -= instance.OnD_Pad_up;
            @D_Pad_Down.started -= instance.OnD_Pad_Down;
            @D_Pad_Down.performed -= instance.OnD_Pad_Down;
            @D_Pad_Down.canceled -= instance.OnD_Pad_Down;
            @D_Pad_Right.started -= instance.OnD_Pad_Right;
            @D_Pad_Right.performed -= instance.OnD_Pad_Right;
            @D_Pad_Right.canceled -= instance.OnD_Pad_Right;
            @D_Pad_Left.started -= instance.OnD_Pad_Left;
            @D_Pad_Left.performed -= instance.OnD_Pad_Left;
            @D_Pad_Left.canceled -= instance.OnD_Pad_Left;
        }

        public void RemoveCallbacks(IPlayerQuickSlotsActions instance)
        {
            if (m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerQuickSlotsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerQuickSlotsActions @PlayerQuickSlots => new PlayerQuickSlotsActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovment(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IPlayerActionActions
    {
        void OnRoll(InputAction.CallbackContext context);
        void OnRB(InputAction.CallbackContext context);
        void OnRT(InputAction.CallbackContext context);
        void OnInteractables(InputAction.CallbackContext context);
        void OnLockOn(InputAction.CallbackContext context);
        void OnLockOnTargetRight(InputAction.CallbackContext context);
        void OnLockOnTargetLeft(InputAction.CallbackContext context);
        void OnY(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnBackStab(InputAction.CallbackContext context);
        void OnParry(InputAction.CallbackContext context);
        void OnShield(InputAction.CallbackContext context);
        void OnHealRecovery(InputAction.CallbackContext context);
        void OnManaREcovery(InputAction.CallbackContext context);
        void OnConsumable(InputAction.CallbackContext context);
    }
    public interface IPlayerQuickSlotsActions
    {
        void OnD_Pad_up(InputAction.CallbackContext context);
        void OnD_Pad_Down(InputAction.CallbackContext context);
        void OnD_Pad_Right(InputAction.CallbackContext context);
        void OnD_Pad_Left(InputAction.CallbackContext context);
    }
}
